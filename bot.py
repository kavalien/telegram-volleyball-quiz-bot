import logging
import random
import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode
import psycopg2
from psycopg2 import sql

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
GET_NAME, CHOOSE_CATEGORY, QUIZ = range(3)

# ------------------------ –ü–†–ê–í–ò–õ–ê –í–û–õ–ï–ô–ë–û–õ–ê (20 –≤–æ–ø—Ä–æ—Å–æ–≤) ------------------------
volleyball_rules_questions = [
    # ... (–≤–∞—à–∏ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º)
]

# ------------------------ –ò–°–¢–û–†–ò–Ø –í–û–õ–ï–ô–ë–û–õ–ê (20 –≤–æ–ø—Ä–æ—Å–æ–≤) ------------------------
volleyball_history_questions = [
    # ... (–≤–∞—à–∏ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏)
]

# -------------------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---------------------
def get_db_connection():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    """
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    return conn

def initialize_database():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS scoreboard (
            username TEXT PRIMARY KEY,
            score INTEGER NOT NULL
        );
    """)
    conn.commit()
    cur.close()
    conn.close()

def get_user_score(username):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT score FROM scoreboard WHERE username = %s;", (username,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    return result[0] if result else 0

def update_user_score(username, score):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    conn = get_db_connection()
    cur = conn.cursor()
    current_score = get_user_score(username)
    if score > current_score:
        cur.execute("""
            INSERT INTO scoreboard (username, score)
            VALUES (%s, %s)
            ON CONFLICT (username) DO UPDATE
            SET score = EXCLUDED.score;
        """, (username, score))
        conn.commit()
    cur.close()
    conn.close()

def get_top_scores(limit=10):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º.
    """
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT username, score FROM scoreboard
        ORDER BY score DESC, username ASC
        LIMIT %s;
    """, (limit,))
    results = cur.fetchall()
    cur.close()
    conn.close()
    return results

def shuffle_questions(questions_list):
    """
    –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.
    """
    random.shuffle(questions_list)
    for q in questions_list:
        correct_answer = q["options"][q["correct_index"]]
        random.shuffle(q["options"])
        q["correct_index"] = q["options"].index(correct_answer)

# ------------------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await update.message.reply_text(
        "<b>\U0001F44B –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É!</b>\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        parse_mode=ParseMode.HTML
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    user_name = update.message.text.strip()
    context.user_data["user_name"] = user_name
    context.user_data["score"] = 0

    reply_keyboard = [["–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–ª–µ–π–±–æ–ª–∞", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ª–µ–π–±–æ–ª–∞"]]
    await update.message.reply_text(
        f"<b>–û—Ç–ª–∏—á–Ω–æ, {user_name}!</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CHOOSE_CATEGORY

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É.
    """
    category_text = update.message.text.strip().lower()

    if category_text == "–ø—Ä–∞–≤–∏–ª–∞ –≤–æ–ª–µ–π–±–æ–ª–∞":
        questions = volleyball_rules_questions.copy()
    elif category_text == "–∏—Å—Ç–æ—Ä–∏—è –≤–æ–ª–µ–π–±–æ–ª–∞":
        questions = volleyball_history_questions.copy()
    else:
        await update.message.reply_text(
            "<i>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</i>",
            parse_mode=ParseMode.HTML
        )
        return CHOOSE_CATEGORY

    shuffle_questions(questions)
    context.user_data["questions"] = questions
    context.user_data["current_question_index"] = 0

    return await ask_question(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –ò–Ω–∞—á–µ ‚Äî –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏.
    """
    questions = context.user_data["questions"]
    current_index = context.user_data["current_question_index"]

    if current_index >= len(questions):
        return await show_score(update, context)

    question_data = questions[current_index]
    question_text = question_data["question"]
    options = question_data["options"]

    progress_text = f"–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(questions)}"
    text_to_send = (
        f"<b>\U00002753 {progress_text}</b>\n\n"
        f"<i>{question_text}</i>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
    )

    reply_keyboard = [[opt] for opt in options]

    await update.message.reply_text(
        text_to_send,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return QUIZ

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–í–µ—Ä–Ω–æ!¬ª –∏–ª–∏ ¬´–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ...¬ª,
    –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    """
    user_answer = update.message.text.strip()
    questions = context.user_data["questions"]
    current_index = context.user_data["current_question_index"]
    question_data = questions[current_index]

    correct_index = question_data["correct_index"]
    correct_answer = question_data["options"][correct_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        context.user_data["score"] += 1
        feedback_text = "<b>\U00002705 –í–µ—Ä–Ω–æ!</b>"  # ‚úÖ
    else:
        feedback_text = (
            f"<b>\U0000274C –ù–µ–≤–µ—Ä–Ω–æ!</b>\n"  # ‚ùå
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <i>{correct_answer}</i>"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    await update.message.reply_text(feedback_text, parse_mode=ParseMode.HTML)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data["current_question_index"] += 1
    return await ask_question(update, context)

async def show_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    """
    user_name = context.user_data["user_name"]
    score = context.user_data["score"]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user_score(user_name, score)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_scores = get_top_scores(limit=10)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    if top_scores:
        rating_text = "<b>\U0001F4CA –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"  # üìä
        for i, (name, points) in enumerate(top_scores, start=1):
            rating_text += f"{i}. <b>{name}</b> ‚Äî {points} –æ—á–∫–æ–≤\n"
    else:
        rating_text = "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"<b>\U0001F3C6 –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"  # üèÜ
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –æ—á–∫–æ–≤.\n\n"
        f"{rating_text}\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.",
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel (–¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ).
    """
    await update.message.reply_text(
        "<i>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!</i>",
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

def main():
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    initialize_database()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–æ—Ç–∞)
    application = ApplicationBuilder().token(os.environ['BOT_TOKEN']).build()

    # –°–æ–∑–¥–∞—ë–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CHOOSE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_category)],
            QUIZ: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–ø–æ–ª–ª–∏–Ω–≥)
    application.run_polling()

if __name__ == "__main__":
    main()
